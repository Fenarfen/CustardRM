@page "/customer/view/id={id:int}"
@using CustardRM.Models.DTOs
@using CustardRM.Models.DTOs.Customer
@using CustardRM.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClientService HttpService
@inject IJSRuntime JSRuntime

<link href="css/pages/ViewEditPage.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

@if (!string.IsNullOrEmpty(error))
{
	<p style="color:red">@error</p>
}
else if (customerView == null)
{
	<p>Loading...</p>
}
else
{
	<h3>View Customer Data</h3>

	<div>
		<label>User ID:</label>
		<input type="text" @bind="customerView.Customer.UserID" disabled />

		<label>Profile Name:</label>
		<input type="text" @bind="customerView.Customer.ProfileName" disabled />

		<label>Email:</label>
		<textarea @bind="customerView.Customer.Email" disabled></textarea>

		<label>Created At:</label>
		<input type="datetime" @bind="customerView.Customer.CreatedAt" disabled />
	</div>

	<h4>Sales Orders:</h4>

	<table class="table table-striped">
		<thead>
			<tr>
				<th>ID</th>
				<th>Order Date</th>
				<th>CustomerRef</th>
				<th>TotalAmount</th>
			</tr>
		</thead>
		<tbody>
			@if (customerView.Orders.Count == 0)
			{
				<p>No orders found</p>
			}
			else
			{
				foreach (var item in customerView.Orders)
				{
					<tr>
						<td>@item.ID</td>
						<td>@item.OrderDate</td>
						<td>@item.CustomerRef</td>
						<td>@item.TotalAmount</td>
					</tr>
				}
			}
		</tbody>
	</table>

	<h4>Returns:</h4>

	<table class="table table-striped">
		<thead>
			<tr>
				<th>ID</th>
				<th>Sales Order Line ID</th>
				<th>Quantity Returned</th>
				<th>Return Date</th>
				<th>Reason</th>
			</tr>
		</thead>
		<tbody>
			@if (customerView.Orders.Count == 0)
			{
				<p>No orders found</p>
			}
			else
			{
				foreach (var item in customerView.Returns)
				{
					<tr>
						<td>@item.ID</td>
						<td>@item.SalesOrderLineID</td>
						<td>@item.QuantityReturned</td>
						<td>@item.ReturnDate</td>
						<td>@item.Reason</td>
					</tr>
				}
			}
		</tbody>
	</table>

	<h4>Reviews</h4>
	@foreach (var review in customerView.Reviews)
	{
		<div>
			<p>
				<strong>Rating:</strong>
				@for (int i = 0; i < review.ReviewRating; i++)
				{
					<i class="bi bi-star-fill text-warning"></i>
				}

				@for (int i = Convert.ToInt16(review.ReviewRating); i < 5; i++)
				{
					<i class="bi bi-star text-muted"></i>
				}
			</p>
			@{
				var helpfulnessParts = review.ReviewHelpfulness.Split('/');
				var thumbsUp = helpfulnessParts.Length > 0 ? helpfulnessParts[0] : "0";
				var thumbsDown = helpfulnessParts.Length > 1 ? helpfulnessParts[1] : "0";
			}

			<p>
				<strong>Helpfulness:</strong>
				<i class="bi bi-hand-thumbs-up-fill text-success me-1"></i> @thumbsUp
				/
				<i class="bi bi-hand-thumbs-down-fill text-danger ms-1 me-1"></i> @thumbsDown
			</p>
			<p><strong>Text:</strong> @review.ReviewText</p>
			<p><strong>Sentiment:</strong> @review.PredictedAISentiment</p>
			<p><strong>Created At:</strong> @review.CreatedAt</p>
			<hr />
		</div>
	}
}


@code {
	[Parameter] public int id { get; set; }
	private string error = "";
	private string token;

	private CustomerView customerView;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			token = await JSRuntime.InvokeAsync<string>(
				"localStorage.getItem",
				new object[] { "authToken" }
			);

			if (!string.IsNullOrEmpty(token))
			{
				HttpService.Http.DefaultRequestHeaders.Authorization =
					new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
			}

			var response = await HttpService.SendGet($"api/customer/get-customer-view/id={id}");

			if (response.IsSuccessStatusCode)
			{
				var json = await response.Content.ReadAsStringAsync();

				customerView = JsonSerializer.Deserialize<CustomerView>(
					json,
					new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
				);
			}
			else
			{
				Console.WriteLine($"[ViewCustomer] Request to api/customer/get-customer-view={id} failed with status: {response.StatusCode}");
			}

			StateHasChanged();
		}
	}
}